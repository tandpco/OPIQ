{
  "name": "password-reset-nodemailer",
  "description": "Middleware for password reset emails using nodemailer",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/sampepose/node-password-reset.git"
  },
  "main": "index.js",
  "keywords": [
    "middleware",
    "web",
    "password",
    "reset"
  ],
  "directories": {
    "lib": ".",
    "example": "example"
  },
  "dependencies": {
    "nodemailer": "0.3.x",
    "ent": "0.0.x"
  },
  "devDependencies": {
    "tap": "0.1.x",
    "express": "2.5.x",
    "sesame": "0.1.x",
    "smtp-protocol": "0.1.x",
    "request": "2.9.x"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "license": "MIT",
  "author": {
    "name": "Sam Pepose",
    "email": "sampepose@gmail.com"
  },
  "readme": "password-reset\n==============\n\nmiddleware for managing password reset emails\n\nTODO: Update this README and example\n\nexample\n-------\n\n``` js\nvar fs = require('fs');\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(express.static(__dirname));\napp.use(require('sesame')()); // for sessions\n\nvar forgot = require('password-reset')({\n    uri : 'http://localhost:8080/password_reset',\n    from : 'password-robot@localhost',\n    host : 'localhost', port : 25,\n});\napp.use(forgot.middleware);\n\napp.post('/forgot', express.bodyParser(), function (req, res) {\n    var email = req.body.email;\n    var reset = forgot(email, function (err) {\n        if (err) res.end('Error sending message: ' + err)\n        else res.end('Check your inbox for a password reset message.')\n    });\n    \n    reset.on('request', function (req_, res_) {\n        req_.session.reset = { email : email, id : reset.id };\n        fs.createReadStream(__dirname + '/forgot.html').pipe(res_);\n    });\n});\n\napp.post('/reset', express.bodyParser(), function (req, res) {\n    if (!req.session.reset) return res.end('reset token not set');\n    \n    var password = req.body.password;\n    var confirm = req.body.confirm;\n    if (password !== confirm) return res.end('passwords do not match');\n    \n    // update the user db here\n    \n    forgot.expire(req.session.reset.id);\n    delete req.session.reset;\n    res.end('password reset');\n});\n\napp.listen(8080);\nconsole.log('Listening on :8080');\n```\n\nmethods\n=======\n\nvar forgot = require('password-reset')(opts)\n--------------------------------------------\n\nCreate a new password reset session `forgot` with some options `opts`.\n\n`opts.uri` must be the location of the password reset route, such as\n`'http://localhost:8080/_password_reset'`. A query string is appended to\n`opts.uri` with a unique one-time hash.\n\n`opts.body(uri)` can be a function that takes the password reset link `uri` and\nreturns the email body as a string.\n\nThe rest of the options are passed directly to\n[node-pony](https://github.com/substack/node-pony).\n\nWhen the user clicks on the uri link `forgot` emits a `\"request\", req, res`\nevent.\n\nvar reset = forgot(email, cb)\n-----------------------------\n\nSend a password reset email to the `email` address.\n`cb(err)` fires when the email has been sent.\n\nforgot.middleware(req, res, next)\n---------------------------------\n\nUse this middleware function to intercept requests on the `opts.uri`.\n\nforgot.expire(id)\n-----------------\n\nPrevent a session from being used again. Call this after you have successfully\nreset the password.\n\nattributes\n==========\n\nreset.id\n--------\n\nPass this value to `forgot.expire(id)`.\n\nevents\n======\n\nreset.on('request', function (req, res) { ... })\n------------------------------------------------\n\nEmitted when the user clicks on the password link from the email.\n\nreset.on('failure', function (err) { ... })\n-------------------------------------------\n\nEmitted when an error occurs sending email. You can also listen for this event\nin `forgot()`'s callback.\n\nreset.on('success', function () {})\n-----------------------------------\n\nEmitted when an email is successfully sent.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install password-reset\n```\n\nlicense\n=======\n\nMIT/X11\n\ncredits to\n==========\nSubstack for the original module\n\ntest\n====\n\nWith [npm](http://npmjs.org), do:\n\n    npm test\n",
  "readmeFilename": "README.markdown",
  "_id": "password-reset-nodemailer@0.0.1",
  "dist": {
    "shasum": "39f4ba7f62ac2e60c6acc820c546f9ec00a20ea4",
    "tarball": "http://registry.npmjs.org/password-reset-nodemailer/-/password-reset-nodemailer-0.0.1.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "sampepose",
    "email": "sampepose@gmail.com"
  },
  "maintainers": [
    {
      "name": "sampepose",
      "email": "sampepose@gmail.com"
    }
  ],
  "_shasum": "39f4ba7f62ac2e60c6acc820c546f9ec00a20ea4",
  "_from": "password-reset-nodemailer@0.0.1",
  "_resolved": "https://registry.npmjs.org/password-reset-nodemailer/-/password-reset-nodemailer-0.0.1.tgz"
}
